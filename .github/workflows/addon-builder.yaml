name: Addon Builder

# TODO: figure out a more wildcard-y way to do this
env:
  BUILD_ARGS: "--test"
  MINDCTRL_SRC_DIR: "python/src/"
  MINDCTRL_SERVICES_DIR: "services/"
  ADDONS_DIR: "addons/"

on:
  push:
    branches:
      - main

jobs:
  init:
    runs-on: ubuntu-latest
    name: Initialize builds
    outputs:
      changed_addons: ${{ steps.changed_addons.outputs.addons }}
      changed: ${{ steps.changed_addons.outputs.changed }}
    steps:
      - name: Check out the repository
        uses: actions/checkout@v4

      - name: Get changed files
        id: changed_files
        uses: masesgroup/retrieve-changed-files@v3

      - name: Get changed add-ons
        id: changed_addons
        run: |
          declare -a changed_addons
          declare -a all_addons=("addons/mindctrl")
          for addon in "${all_addons[@]}"; do
            if [[ "${{ steps.changed_files.outputs.all }}" =~ "${ADDONS_DIR}" ]] || [[ "${{ steps.changed_files.outputs.all }}" =~ "${MINDCTRL_SRC_DIR}" ]] || [[ "${{ steps.changed_files.outputs.all }}" =~ "${MINDCTRL_SERVICES_DIR}" ]]; then
              if [[ ! "${changed_addons[@]}" =~ $addon ]]; then
                changed_addons+=("\"${addon}\",");
              fi
            fi
          done

          changed=$(echo ${changed_addons[@]} | rev | cut -c 2- | rev)

          if [[ -n ${changed} ]]; then
            if [[ ! "${{ steps.changed_files.outputs.all }}" =~ "config.yaml" ]]; then
              echo "Error: config.yaml has not been changed but the add-on has been. Please update the version"
              exit 1
            fi

            echo "Changed add-ons: $changed";
            echo "changed=true" >> $GITHUB_OUTPUT;
            echo "addons=[$changed]" >> $GITHUB_OUTPUT;
          else
            echo "No add-on had any monitored files changed (${{ steps.changed_files.outputs.all }})";
          fi
  build:
    needs: init
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    if: needs.init.outputs.changed == 'true'
    name: Build ${{ matrix.arch }} ${{ matrix.addon }} add-on
    strategy:
      matrix:
        addon: ${{ fromJson(needs.init.outputs.changed_addons) }}
        arch: ["aarch64", "amd64", "armhf", "armv7", "i386"]

    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Get information
        id: info
        uses: home-assistant/actions/helpers/info@master
        with:
          path: "./${{ matrix.addon }}"

      - name: Check if add-on should be built
        id: check
        run: |
          if [[ "${{ steps.info.outputs.architectures }}" =~ ${{ matrix.arch }} ]]; then
             echo "build_arch=true" >> $GITHUB_OUTPUT;
             echo "image=$(echo ${{ steps.info.outputs.image }} | cut -d'/' -f3)" >> $GITHUB_OUTPUT;
             if [[ -z "${{ github.head_ref }}" ]] && [[ "${{ github.event_name }}" == "push" ]]; then
                 echo "BUILD_ARGS=" >> $GITHUB_ENV;
             fi
           else
             echo "${{ matrix.arch }} is not a valid arch for ${{ matrix.addon }}, skipping build";
             echo "build_arch=false" >> $GITHUB_OUTPUT;
          fi

      - name: Copy python source + services into build context because builder action doesn't support --build-context
        id: copy
        run: bash scripts/copy_content_to_addon_context.sh

      - name: Login to GitHub Container Registry
        if: env.BUILD_ARGS != '--test'
        uses: docker/login-action@v3.2.0
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build ${{ matrix.addon }} add-on
        if: steps.check.outputs.build_arch == 'true'
        uses: home-assistant/builder@2024.03.5
        with:
          args: |
            ${{ env.BUILD_ARGS }} \
            --${{ matrix.arch }} \
            --target /data/${{ matrix.addon }} \
            --image "${{ steps.check.outputs.image }}" \
            --docker-hub "ghcr.io/${{ github.repository_owner }}" \
            --addon
